
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model IEnumerable<WebGSMT.Areas.Users.Controllers.HomeController.DataDevice>
<style>
    body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    }

    #chartdiv {
        width: 100%;
        height: 500px;
        max-width: 100%;
    }
</style>
<div class="text-center">
    <script src="https://www.amcharts.com/lib/4/core.js"></script>
    <script src="https://www.amcharts.com/lib/4/charts.js"></script>
    <script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>
    @{
        var listUnit = ViewBag.ListUnit as IEnumerable<SelectListItem>;
        var FirstUnit = listUnit.First().Text;

    }
    <div class="dropdown" onload="">
        <span class="text-light font-size-h3">Select Unit  </span> <button type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <span id="options">
                @{
                    <span>@FirstUnit</span>
                }
            </span>
            <span class="caret"></span>
        </button>
        <div class="dropdown-menu">
            @foreach (var item in listUnit)
            {

                <a class="dropdown-item" onclick="dataAmchart('@item.Text')">@item.Text</a>
            }
        </div>
        <br />
    </div>
    <div class="card card-custom gutter-b">
        <!-- HTML -->
        @*<div id="chartdiv1"></div>
            <br />*@
        <div id="chartdiv"></div>
    </div>
    <br />
    <!-- Button trigger modal -->
    <div style="float:right">
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
            Show
        </button>

        <!-- Modal -->
        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Data's List in PLC</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div>
                            <table class="table table-bordered">
                                <tr class="table-secondary">
                                    <th>
                                        Tag Name
                                    </th>
                                    <th>
                                        Time
                                    </th>
                                    <th>
                                        Value
                                    </th>
                                    <th>
                                        Unit
                                    </th>
                                    <th>
                                        Connected
                                    </th>
                                </tr>
                                @foreach (var item in Model.OrderBy(o => o.TagName))
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(m => item.TagName)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => item.Time)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => item.Value)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => item.Unit)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => item.Connected)
                                        </td>
                                    </tr>
                                }
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    //dataAmchart("all");
    // Themes begin
    var FirstUnit = '@FirstUnit';
    dataAmchart(FirstUnit);
    function dataAmchart(type) {
        document.getElementById("options").innerHTML = type;
        am4core.useTheme(am4themes_animated);
        // Themes end

    // Create chart instance
    var chart = am4core.create("chartdiv", am4charts.XYChart);

    // Create axes
    var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

    //for (var i = 0; i < 10; i++) {
    //    createSeries(i, "Series #" + i);
    //}
    //createSeries(121, "Series #" + 121);
        @{
        int i = 0;
            foreach (var name in ViewBag.TagName)
            {
             <text>
            if ("@name.Unit" == type) {
            </text>
                <text>
                var data = [];
                var value;
                </text>

                    foreach (var item in Model.Where(x => x.TagName == name.TagName.ToString() && x.Connected == true))
                    {

                    <text>
                if ("@item.Unit" == type) {
                    value = @item.Value;
                    var dataItem = { Time: "@item.Time.ToString("MM/dd/yyyy")" };
                    dataItem["Value" + @i] = value;
                    data.push(dataItem);
                }
                    </text>
                    }
			    <text>
                createSeries(@i, "@name.TagName.ToString()", data);
			    </text>
                    i++;
                <text>
                }
            </text>
            }
        }

            // Create series
            function createSeries(s, name, data) {
                var series = chart.series.push(new am4charts.LineSeries());
                series.dataFields.valueY = "Value" + s;
                series.dataFields.dateX = "Time";
                series.name = name;
                series.tooltipText = "{valueY}";
                series.tooltip.pointerOrientation = "vertical";
                series.tooltip.background.fillOpacity = 0.5;
                chart.cursor = new am4charts.XYCursor();
                chart.cursor.xAxis = dateAxis;
                var segment = series.segments.template;
                segment.interactionsEnabled = true;

                var hoverState = segment.states.create("hover");
                hoverState.properties.strokeWidth = 3;

                var dimmed = segment.states.create("dimmed");
                dimmed.properties.stroke = am4core.color("#dadada");

                segment.events.on("over", function (event) {
                processOver(event.target.parent.parent.parent);
            });

        segment.events.on("out", function (event) {
                processOut(event.target.parent.parent.parent);
            });


        series.data = data;
        return series;
    }

        chart.legend = new am4charts.Legend();
    chart.legend.position = "right";
    chart.legend.scrollable = true;
    var scrollbarX = new am4core.Scrollbar();
        scrollbarX.marginBottom = 20;
    chart.scrollbarX = scrollbarX;
    chart.legend.itemContainers.template.events.on("over", function (event) {
            processOver(event.target.dataItem.dataContext);
        })

    chart.legend.itemContainers.template.events.on("out", function (event) {
            processOut(event.target.dataItem.dataContext);
        })

    function processOver(hoveredSeries) {
            hoveredSeries.toFront();

            hoveredSeries.segments.each(function (segment) {
                segment.setState("hover");
            })

        chart.series.each(function (series) {
                if (series != hoveredSeries) {
                    series.segments.each(function (segment) {
                        segment.setState("dimmed");
                    })
                series.bulletsContainer.setState("dimmed");
                }
            });
        }

        function processOut(hoveredSeries) {
            chart.series.each(function (series) {
                series.segments.each(function (segment) {
                    segment.setState("default");
                })
            series.bulletsContainer.setState("default");
            });
        }
    }

    //document.getElementById("options").innerHTML = 'All ';

</script>

