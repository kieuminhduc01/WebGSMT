
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model IEnumerable<WebGSMT.Areas.Users.Models.Home.DataPaging>
<style>
    body {
        font-family: 'Open Sans', sans-serif;
    }

    #chartdiv {
        width: 100%;
        height: 500px;
        max-width: 100%;
    }
</style>
<div class="row col-lg-12" style="justify-content: center;">
    <div class="col-lg-6">
        <div class="text-center">
            <script src="https://www.amcharts.com/lib/4/core.js"></script>
            <script src="https://www.amcharts.com/lib/4/charts.js"></script>
            <script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>
            @{
                var listUnit = ViewBag.ListUnit as IEnumerable<SelectListItem>;
                var FirstUnit = listUnit.First().Text;

                var listDevice = ViewBag.ListDevice as IEnumerable<SelectListItem>;
                var FirstDevice = listDevice.First().Text;

            }
            
        <div class="card card-custom gutter-b">
            <!-- HTML -->
            @*<div id="chartdiv1"></div>
        <br />*@


            <div class="row mt-3 mx-auto">
                <div class="dropdown mb-2 mr-5">
                    <span class="text-dark font-size-h3 donvi">Đơn vị: </span> <button type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span>
                            @{
                                <span id="unitText">@FirstUnit</span>
                            }
                        </span>
                        <span class="caret"></span>
                    </button>
                    <div class="dropdown-menu" id="ddUnit">
                        @*@foreach (var item in listUnit)
                    {

                        <a class="dropdown-item" onclick="selectCombobox(null, '@item.Text')">@item.Text</a>
                    }*@
                    </div>
                    <br />
                </div>
                <div class="dropdown mb-2">
                    <span class="text-dark font-size-h3">Thiết bị: </span> <button type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span>
                            @{
                                <span id="deviceText">@FirstDevice</span>
                            }
                        </span>
                        <span class="caret"></span>
                    </button>
                    <div class="dropdown-menu">
                        @foreach (var item in listDevice)
                        {

                            <a class="dropdown-item" onclick="selectCombobox('@item.Text',null)">@item.Text</a>
                        }
                    </div>
                    <br />
                </div>
            </div>
            <div id="chartdiv"></div>
        </div>
            <!-- Button trigger modal -->
        </div>
    </div>

    <div class="col-lg-6">
        <div class="card card-custom">
            <!--begin::Header-->
            <!--<div class="card-header flex-wrap border-0 pt-6 pb-0">-->
                @*<div class="card-title">
                    <h3 class="card-label">
                        Danh sách dữ liệu
                    </h3>
                </div>*@
            <!--</div>-->
            <!--end::Header-->
            <!--begin::Body-->
            <div class="card-body">
                <table class="table table-hover table-checkable" id="loadTableData" style="margin-top: 13px !important">
                    <thead>
                        <tr>
                            <th>Thẻ tên</th>
                            <th>Tên thiết bị</th>
                            <th>Giá trị</th>
                            <th>Thời gian</th>
                            <th>Trạng thái</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>   
    </div>
</div>

<script>
    var DEVICENAME = '@FirstDevice';
    var UNIT = '@FirstUnit';

    function selectCombobox(deviceName, unit) {
            if (deviceName != null) {
                DEVICENAME = deviceName;
                $('#deviceText').html(deviceName);
                $('#loadTableData').DataTable().ajax.reload(null, false);
                unitByDevice(DEVICENAME);
            }
            if (unit != null) {
                $('#unitText').html(unit);
                UNIT = unit;
            }
            changeChart(DEVICENAME, UNIT);
            //unitByDevice(DEVICENAME);
        }
    jQuery(document).ready(function () {
        changeChart(DEVICENAME, UNIT);
        unitByDevice(DEVICENAME);
    });
    function unitByDevice(PLC) {
        $('#ddUnit').html('');
        $.get("/Users/Home/units", { PLC: PLC }, function (data, status) {
            $('#ddUnit').children().remove();
            for (var i = 0; i < data.length; i++){
                $('#ddUnit').append(`<a class="dropdown-item" onclick="selectCombobox(null, '${data[i]}')">${data[i]}</a>`);

            }
            $('#unitText').html(data[0]);
            selectCombobox(null, data[0]);
        });
    }
    function changeChart(PLC, Unit) {
        $.ajax({
            url: '/Users/Home/getDataDevice',
            type: 'get',
            data: {
                PLC: PLC,
                Unit: Unit
            },
            success: function (data) {
                am4core.useTheme(am4themes_animated);
                // Themes end

                // Create chart instance
                var chart = am4core.create("chartdiv", am4charts.XYChart);

                // Create axes
                var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
                var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                var count = 0;
                for (var i = 0; i < data.length; i++) {
                    var list = [];
                    var item = data[i].value;
                    for (var y = 0; y < item.length; y++) {
                        var ada = item[y];
                        if (ada.connected) {
                            var dataItem = { Time: ada.time };
                            dataItem["Value" + count] = ada.value;
                            list.push(dataItem);
                        }
                    }
                    createSeries(count, data[i].key, list);
                    count++;
                }
                function createSeries(s, name, data) {
                    var series = chart.series.push(new am4charts.LineSeries());
                    series.dataFields.valueY = "Value" + s;
                    series.dataFields.dateX = "Time";
                    series.name = name;
                    series.tooltipText = "{valueY}";
                    series.tooltip.pointerOrientation = "vertical";
                    series.tooltip.background.fillOpacity = 0.5;
                    chart.cursor = new am4charts.XYCursor();
                    chart.cursor.xAxis = dateAxis;
                    var segment = series.segments.template;
                    segment.interactionsEnabled = true;

                    var hoverState = segment.states.create("hover");
                    hoverState.properties.strokeWidth = 3;

                    var dimmed = segment.states.create("dimmed");
                    dimmed.properties.stroke = am4core.color("#dadada");

                    segment.events.on("over", function (event) {
                        processOver(event.target.parent.parent.parent);
                    });

                    segment.events.on("out", function (event) {
                        processOut(event.target.parent.parent.parent);
                    });

                    series.data = data;
                    return series;
                }

                chart.legend = new am4charts.Legend();
                chart.legend.position = "right";
                chart.legend.scrollable = true;
                var scrollbarX = new am4core.Scrollbar();
                scrollbarX.marginBottom = 20;
                chart.scrollbarX = scrollbarX;
                chart.legend.itemContainers.template.events.on("over", function (event) {
                    processOver(event.target.dataItem.dataContext);
                })

                chart.legend.itemContainers.template.events.on("out", function (event) {
                    processOut(event.target.dataItem.dataContext);
                })

                function processOver(hoveredSeries) {
                    hoveredSeries.toFront();

                    hoveredSeries.segments.each(function (segment) {
                        segment.setState("hover");
                    })

                    chart.series.each(function (series) {
                        if (series != hoveredSeries) {
                            series.segments.each(function (segment) {
                                segment.setState("dimmed");
                            })
                            series.bulletsContainer.setState("dimmed");
                        }
                    });
                }

                function processOut(hoveredSeries) {
                    chart.series.each(function (series) {
                        series.segments.each(function (segment) {
                            segment.setState("default");
                        })
                        series.bulletsContainer.setState("default");
                    });
                }
            }, error: function (data) {
            }
        });
    }
    setInterval(function () {
        changeChart(DEVICENAME, UNIT);
    },20000);
    
</script>
<script src="~/My_Js/Home/showtabledata.js"></script>
