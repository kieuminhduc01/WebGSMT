// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebGSMT.Models;

namespace WebGSMT.Migrations
{
    [DbContext(typeof(GiamSatMoiTruongDbContext))]
    partial class GiamSatMoiTruongDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5");

            modelBuilder.Entity("WebGSMT.Models.Account", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("UserName");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("WebGSMT.Models.Account_Role", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .HasColumnType("TEXT");

                    b.HasKey("UserName", "RoleName");

                    b.HasIndex("RoleName");

                    b.ToTable("Account_Role");
                });

            modelBuilder.Entity("WebGSMT.Models.Catalog_Data", b =>
                {
                    b.Property<string>("TagName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("WarnningMax")
                        .HasColumnType("REAL");

                    b.Property<double>("WarnningMin")
                        .HasColumnType("REAL");

                    b.HasKey("TagName");

                    b.ToTable("Catalog_Data");
                });

            modelBuilder.Entity("WebGSMT.Models.Data", b =>
                {
                    b.Property<string>("TagName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Connected")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("TagName", "DeviceName", "Time");

                    b.HasIndex("DeviceName");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("WebGSMT.Models.Device", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("BranchOrProtocol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameShow")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("WebGSMT.Models.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Parent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("WebGSMT.Models.Permission_Role", b =>
                {
                    b.Property<int>("PermissionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionID", "RoleName");

                    b.HasIndex("RoleName");

                    b.ToTable("Permission_Role");
                });

            modelBuilder.Entity("WebGSMT.Models.Role", b =>
                {
                    b.Property<string>("RoleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleName");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("WebGSMT.Models.Account_Role", b =>
                {
                    b.HasOne("WebGSMT.Models.Role", "Role")
                        .WithMany("Account_Roles")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebGSMT.Models.Account", "Account")
                        .WithMany("Account_Roles")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebGSMT.Models.Data", b =>
                {
                    b.HasOne("WebGSMT.Models.Device", "Device")
                        .WithMany("Datas")
                        .HasForeignKey("DeviceName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebGSMT.Models.Catalog_Data", "Catalog_Data")
                        .WithMany("Datas")
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebGSMT.Models.Permission_Role", b =>
                {
                    b.HasOne("WebGSMT.Models.Permission", "Permission")
                        .WithMany("Permission_Roles")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebGSMT.Models.Role", "Role")
                        .WithMany("permission_Roles")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
